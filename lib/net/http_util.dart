import 'dart:async';import 'dart:io';import 'package:bujuan/constant/constants.dart';import 'package:bujuan/utils/sp_util.dart';import 'package:cookie_jar/cookie_jar.dart';import 'package:dio/dio.dart';//import 'package:path_provider/path_provider.dart';class HttpUtil {  static HttpUtil instance;  Dio dio;  BaseOptions options;  static Completer<PersistCookieJar> _cookieJar = Completer();  CancelToken cancelToken = CancelToken();  static Future<HttpUtil> getInstance() async {    if (null == instance) instance = HttpUtil();//    PersistCookieJar cookieJar;//    try {//      final path = (await getApplicationDocumentsDirectory()).path;//      cookieJar = PersistCookieJar(dir: path + '/.cookies/');//    } catch (e) {}//    _cookieJar.complete(cookieJar);    return instance;  }  /*   * config it and create   */  HttpUtil() {    //BaseOptions、Options、RequestOptions 都可以配置参数，优先级别依次递增，且可以根据优先级别覆盖参数    options = BaseOptions(      //请求基地址,可以包含子路径      baseUrl: 'http://bujuan.winford.tech',      //连接服务器超时时间，单位是毫秒.      connectTimeout: 10000,      //响应流上前后两次接受到数据的间隔，单位为毫秒。      receiveTimeout: 10000,      //Http请求头.      headers: {        //do something        "version": "1.0.0"      },      //请求的Content-Type，默认值是[ContentType.json]. 也可以用ContentType.parse("application/x-www-form-urlencoded")      contentType: ContentType.json,      //表示期望以那种格式(方式)接受响应数据。接受四种类型 `json`, `stream`, `plain`, `bytes`. 默认值是 `json`,      responseType: ResponseType.plain,    );    dio = Dio(options);    //Cookie管理    dio.interceptors.add(CookieManager(CookieJar()));    //添加拦截器    dio.interceptors        .add(InterceptorsWrapper(onRequest: (RequestOptions options) {      print("请求之前");      // Do something before request is sent      return options; //continue    }, onResponse: (Response response) {      print("响应之前");      // Do something with response data      return response; // continue    }, onError: (DioError e) {      print("错误之前");      // Do something with response error      return e; //continue    }));  }  Future<List<Cookie>> _loadCookies() async {    final jar = await _cookieJar.future;    if (jar == null) return const [];    final uri = Uri.parse('http://music.163.com');    return jar.loadForRequest(uri);  }  void _saveCookies(List<Cookie> cookies) async {    final jar = await _cookieJar.future;    if (jar == null) return;    jar.saveFromResponse(Uri.parse('http://music.163.com'), cookies);  }  /*   * get请求   */  get(url, {data, options, cancelToken}) async {    Response response;    try {      var cookie = SpUtil.getString('cookie');      Map<String, dynamic> headers = new Map();      headers['Cookie'] = cookie;      response = await dio.get(url,          queryParameters: data, options:  Options(method: 'GET', headers: headers), cancelToken: cancelToken);      print('get success---------${response.statusCode}');//      response.data; 响应体//      response.headers; 响应头//      response.request; 请求体//      response.statusCode; 状态码    } on DioError catch (e) {      print('get error---------$e');      formatError(e);    }    return response;  }  /*   * post请求   */  post(url, {data, options, cancelToken}) async {    Response response;    try {      var cookie = SpUtil.getString(Constants.COOKIE);      Map<String, dynamic> headers = new Map();      headers['Cookie'] = cookie;      response = await dio.post(url,          queryParameters: data, options:  Options(method: 'POST', headers: headers), cancelToken: cancelToken);      print('post success---------${response}');    } on DioError catch (e) {      print('post error---------$e');      formatError(e);    }    return response;  }  /*   * 下载文件   */  downloadFile(urlPath, savePath) async {    Response response;    try {      response = await dio.download(urlPath, savePath,          onReceiveProgress: (int count, int total) {        //进度        print("$count $total");      });      print('downloadFile success---------${response.data}');    } on DioError catch (e) {      print('downloadFile error---------$e');      formatError(e);    }    return response.data;  }  /*   * error统一处理   */  void formatError(DioError e) {    if (e.type == DioErrorType.CONNECT_TIMEOUT) {      // It occurs when url is opened timeout.      print("连接超时");    } else if (e.type == DioErrorType.SEND_TIMEOUT) {      // It occurs when url is sent timeout.      print("请求超时");    } else if (e.type == DioErrorType.RECEIVE_TIMEOUT) {      //It occurs when receiving timeout      print("响应超时");    } else if (e.type == DioErrorType.RESPONSE) {      // When the server response, but with a incorrect status, such as 404, 503...      print("出现异常");    } else if (e.type == DioErrorType.CANCEL) {      // When the request is cancelled, dio will throw a error with this type.      print("请求取消");    } else {      //DEFAULT Default error type, Some other Error. In this case, you can read the DioError.error if it is not null.      print("未知错误");    }  }  /*   * 取消请求   *   * 同一个cancel token 可以用于多个请求，当一个cancel token取消时，所有使用该cancel token的请求都会被取消。   * 所以参数可选   */  void cancelRequests(CancelToken token) {    token.cancel("cancelled");  }}